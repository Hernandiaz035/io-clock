D G "SH_DATA" 0 16 "PIN_A2"
D G "__PCM__" 0 182 ""5.015""
D G "__DEVICE__" 0 182 "1823"
D G "__DATE__" 0 182 ""12-may.-17""
D G "__TIME__" 0 182 ""18:47:02"" "Standard Header file for the PIC16F1823 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 39 "int8" `54 
f B "set_tris_a" 1 39 "void(int8 value)" `53 
v L "value" 1 40 "int8" `56 
f B "set_tris_c" 1 40 "void(int8 value)" `55 
f B "get_tris_a" 1 41 "int8()" `57 
f B "get_tris_c" 1 42 "int8()" `58 
v L "value" 1 43 "int8" `60 
f B "output_a" 1 43 "void(int8 value)" `59 
v L "value" 1 44 "int8" `62 
f B "output_c" 1 44 "void(int8 value)" `61 
f B "input_a" 1 45 "int8()" `63 
f B "input_c" 1 46 "int8()" `64 
f B "input_change_a" 1 47 "int8()" `65 
f B "input_change_c" 1 48 "int8()" `66 
v L "pin" 1 49 "int16" `68 
f B "input" 1 49 "int8(int16 pin)" `67 
v L "pin" 1 50 "int16" `70 
f B "input_state" 1 50 "int8(int16 pin)" `69 
v L "pin" 1 51 "int16" `72 
f B "output_low" 1 51 "void(int16 pin)" `71 
v L "pin" 1 52 "int16" `74 
f B "output_high" 1 52 "void(int16 pin)" `73 
v L "pin" 1 53 "int16" `76 
f B "output_toggle" 1 53 "void(int16 pin)" `75 
v L "pin" 1 54 "int16" `78 
v L "level" 1 54 "int8" `79 
f B "output_bit" 1 54 "void(int16 pin,int8 level)" `77 
v L "pin" 1 55 "int16" `81 
f B "output_float" 1 55 "void(int16 pin)" `80 
v L "pin" 1 56 "int16" `83 
f B "output_drive" 1 56 "void(int16 pin)" `82  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 60 "96"
d G "PIN_A1" 1 61 "97"
d G "PIN_A2" 1 62 "98"
d G "PIN_A3" 1 63 "99"
d G "PIN_A4" 1 64 "100"
d G "PIN_A5" 1 65 "101"
d G "PIN_C0" 1 67 "112"
d G "PIN_C1" 1 68 "113"
d G "PIN_C2" 1 69 "114"
d G "PIN_C3" 1 70 "115"
d G "PIN_C4" 1 71 "116"
d G "PIN_C5" 1 72 "117"
d G "FALSE" 1 75 "0"
d G "TRUE" 1 76 "1"
d G "BYTE" 1 78 "int8"
d G "BOOLEAN" 1 79 "int1"
d G "getc" 1 81 "getch"
d G "fgetc" 1 82 "getch"
d G "getchar" 1 83 "getch"
d G "putc" 1 84 "putchar"
d G "fputc" 1 85 "putchar"
d G "fgets" 1 86 "gets"
d G "fputs" 1 87 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 92 "int8()" `84 
f B "reset_cpu" 1 93 "void()" `85 
f B "sleep" 1 94 "void()" `86  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 96 "0x3C"
d G "BROWNOUT_RESTART" 1 97 "0x3E"
d G "MCLR_FROM_SLEEP" 1 98 "0x27"
d G "WDT_TIMEOUT" 1 99 "0x1F"
d G "WDT_FROM_SLEEP" 1 100 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 101 "0x2F"
d G "MCLR_FROM_RUN" 1 102 "0x37"
d G "RESET_INSTRUCTION" 1 103 "0x3B"
d G "STACK_OVERFLOW" 1 104 "0xBF"
d G "STACK_UNDERFLOW" 1 105 "0x7F"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 112 "int8" `88 
f B "setup_timer_0" 1 112 "void(int8 mode)" `87 
v L "value" 1 113 "int8" `90 
f B "set_timer0" 1 113 "void(int8 value)" `89 
f B "get_timer0" 1 114 "int8()" `91 
v L "mode" 1 115 "int8" `93 
v L "prescaler" 1 115 "int8" `94 
f B "setup_counters" 1 115 "void(int8 mode,int8 prescaler)" `92 
v L "value" 1 116 "int8" `96 
f B "set_rtcc" 1 116 "void(int8 value)" `95 
f B "get_rtcc" 1 117 "int8()" `97  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 119 "0"
d G "T0_EXT_L_TO_H" 1 120 "32"
d G "T0_EXT_H_TO_L" 1 121 "48"
d G "T0_DIV_1" 1 123 "8"
d G "T0_DIV_2" 1 124 "0"
d G "T0_DIV_4" 1 125 "1"
d G "T0_DIV_8" 1 126 "2"
d G "T0_DIV_16" 1 127 "3"
d G "T0_DIV_32" 1 128 "4"
d G "T0_DIV_64" 1 129 "5"
d G "T0_DIV_128" 1 130 "6"
d G "T0_DIV_256" 1 131 "7"
d G "T0_8_BIT" 1 134 "0"
d G "RTCC_INTERNAL" 1 136 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 137 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 138 "48"
d G "RTCC_DIV_1" 1 139 "8"
d G "RTCC_DIV_2" 1 140 "0"
d G "RTCC_DIV_4" 1 141 "1"
d G "RTCC_DIV_8" 1 142 "2"
d G "RTCC_DIV_16" 1 143 "3"
d G "RTCC_DIV_32" 1 144 "4"
d G "RTCC_DIV_64" 1 145 "5"
d G "RTCC_DIV_128" 1 146 "6"
d G "RTCC_DIV_256" 1 147 "7"
d G "RTCC_8_BIT" 1 148 "0"
c L "get_rtcc" 1 3 7 "FUNCTION"
v L "mode" 1 158 "int16" `99 
f B "setup_wdt" 1 158 "void(int16 mode)" `98 
f B "restart_wdt" 1 159 "void()" `100  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 161 "0x1000"
d G "WDT_OFF" 1 162 "0x2000"
d G "WDT_1MS" 1 164 "0x100"
d G "WDT_2MS" 1 165 "0x101"
d G "WDT_4MS" 1 166 "0x102"
d G "WDT_8MS" 1 167 "0x103"
d G "WDT_16MS" 1 168 "0x104"
d G "WDT_32MS" 1 169 "0x105"
d G "WDT_64MS" 1 170 "0x106"
d G "WDT_128MS" 1 171 "0x107"
d G "WDT_256MS" 1 172 "0x108"
d G "WDT_512MS" 1 173 "0x109"
d G "WDT_1S" 1 174 "0x10A"
d G "WDT_2S" 1 175 "0x10B"
d G "WDT_4S" 1 176 "0x10C"
d G "WDT_8S" 1 177 "0x10D"
d G "WDT_16S" 1 178 "0x10E"
d G "WDT_32S" 1 179 "0x10F"
d G "WDT_64S" 1 180 "0x110"
d G "WDT_128S" 1 181 "0x111"
d G "WDT_256S" 1 182 "0x112"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 187 "int16" `102 
f B "setup_timer_1" 1 187 "void(int16 mode)" `101 
f B "get_timer1" 1 188 "int16()" `103 
v L "value" 1 189 "int16" `105 
f B "set_timer1" 1 189 "void(int16 value)" `104  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 192 "0"
d G "T1_CAPSENSE" 1 193 "0xC5"
d G "T1_EXTERNAL" 1 194 "0x85"
d G "T1_EXTERNAL_SYNC" 1 195 "0x81"
d G "T1_FOSC" 1 196 "0x45"
d G "T1_INTERNAL" 1 197 "0x05"
d G "T1_ENABLE_T1OSC" 1 199 "0x08"
d G "T1_DIV_BY_1" 1 201 "0x00"
d G "T1_DIV_BY_2" 1 202 "0x10"
d G "T1_DIV_BY_4" 1 203 "0x20"
d G "T1_DIV_BY_8" 1 204 "0x30"
d G "T1_GATE" 1 206 "0x8000"
d G "T1_GATE_INVERTED" 1 207 "0xC000"
d G "T1_GATE_TOGGLE" 1 208 "0xA000"
d G "T1_GATE_SINGLE" 1 209 "0x9000"
d G "T1_GATE_TIMER0" 1 210 "0x8100"
d G "T1_GATE_COMP1" 1 211 "0x8200"
d G "T1_GATE_COMP2" 1 212 "0x8300"
d G "T1_GATE_A4" 1 214 "0"
d G "T1_GATE_A3" 1 215 "0x10000"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 220 "int8" `107 
v L "period" 1 220 "int8" `108 
v L "postscale" 1 220 "int8" `109 
f B "setup_timer_2" 1 220 "void(int8 mode,int8 period,int8 postscale)" `106 
f B "get_timer2" 1 221 "int8()" `110 
v L "value" 1 222 "int8" `112 
f B "set_timer2" 1 222 "void(int8 value)" `111  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 224 "0"
d G "T2_DIV_BY_1" 1 225 "4"
d G "T2_DIV_BY_4" 1 226 "5"
d G "T2_DIV_BY_16" 1 227 "6"
d G "T2_DIV_BY_64" 1 228 "7"
c L "set_timer2" 1 3 4 "FUNCTION"
v L "mode" 1 234 "int32" `114 
f B "setup_ccp1" 1 234 "void(int32 mode)" `113 
v L "mode" 1 235 "int32" `116 
v L "pwm" 1 235 "int8" `117 
f G "setup_ccp1" 1 235 "void(int32 mode,int8 pwm)" `115 
v L "value" 1 236 "int16" `119 
f B "set_pwm1_duty" 1 236 "void(int16 value)" `118  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 238 "0"
d G "CCP_CAPTURE_FE" 1 239 "4"
d G "CCP_CAPTURE_RE" 1 240 "5"
d G "CCP_CAPTURE_DIV_4" 1 241 "6"
d G "CCP_CAPTURE_DIV_16" 1 242 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 243 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 244 "9"
d G "CCP_COMPARE_INT" 1 245 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 246 "0xB"
d G "CCP_PWM" 1 247 "0xC"
d G "CCP_PWM_PLUS_1" 1 248 "0x1c"
d G "CCP_PWM_PLUS_2" 1 249 "0x2c"
d G "CCP_PWM_PLUS_3" 1 250 "0x3c"
d G "CCP_PWM_H_H" 1 255 "0x0c"
d G "CCP_PWM_H_L" 1 256 "0x0d"
d G "CCP_PWM_L_H" 1 257 "0x0e"
d G "CCP_PWM_L_L" 1 258 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 260 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 261 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 262 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 264 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 265 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 266 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 267 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 268 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 269 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 270 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 272 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 273 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 274 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 276 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 277 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 278 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 280 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 282 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 283 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 284 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 285 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 286 "0x10000000"
c L "set_pwm1_duty" 1 3 3 "FUNCTION"
v L "mode" 1 294 "int32" `124 
f B "setup_spi" 1 294 "void(int32 mode)" `123 
v L "value" 1 295 "int8" `126 
f B "spi_write" 1 295 "void(int8 value)" `125 
f B "spi_read" 1 296 "int8()" `127 
v L "value" 1 297 "int8" `129 
f G "spi_read" 1 297 "int8(int8 value)" `128 
f B "spi_data_in" 1 298 "int8()" `130  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 300 "0x00"
d G "SPI_MASTER" 1 301 "0x20"
d G "SPI_SLAVE" 1 302 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 303 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 304 "0x00"
d G "SPI_CLK_DIV_4" 1 305 "0x00"
d G "SPI_CLK_DIV_16" 1 306 "0x01"
d G "SPI_CLK_DIV_64" 1 307 "0x02"
d G "SPI_CLK_T2" 1 308 "0x03"
d G "SPI_SS_DISABLED" 1 309 "0x01"
d G "SPI_SS_C3" 1 311 "0x00000"
d G "SPI_SS_A3" 1 312 "0x10000"
d G "SPI_DO_C2" 1 313 "0x00000"
d G "SPI_DO_A4" 1 314 "0x20000"
d G "SPI_XMIT_L_TO_H" 1 316 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 317 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 319 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 320 "0x8000"
d G "SPI_L_TO_H" 1 323 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 324 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
v L "baud" 1 328 "int32" `132 
f B "setup_uart" 1 328 "void(int32 baud)" `131 
v L "baud" 1 329 "int32" `134 
v L "stream" 1 329 "int8" `135 
f G "setup_uart" 1 329 "void(int32 baud,int8 stream)" `133 
v L "baud" 1 330 "int32" `137 
v L "stream" 1 330 "int8" `138 
v L "clock" 1 330 "int32" `139 
f G "setup_uart" 1 330 "void(int32 baud,int8 stream,int32 clock)" `136 
v L "baud" 1 331 "int32" `141 
f B "set_uart_speed" 1 331 "void(int32 baud)" `140 
v L "baud" 1 332 "int32" `143 
v L "stream" 1 332 "int8" `144 
f G "set_uart_speed" 1 332 "void(int32 baud,int8 stream)" `142 
v L "baud" 1 333 "int32" `146 
v L "stream" 1 333 "int8" `147 
v L "clock" 1 333 "int32" `148 
f G "set_uart_speed" 1 333 "void(int32 baud,int8 stream,int32 clock)" `145  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 337 "2"
d G "UART_DATA" 1 338 "4"
d G "UART_AUTODETECT" 1 339 "8"
d G "UART_AUTODETECT_NOWAIT" 1 340 "9"
d G "UART_WAKEUP_ON_RDA" 1 341 "10"
d G "UART_SEND_BREAK" 1 342 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 346 "int32" `150 
f B "setup_comparator" 1 346 "void(int32 mode)" `149  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 349 "0x00"
d G "CP1_A1_A0" 1 352 "0x8000"
d G "CP1_C1_A0" 1 353 "0x8001"
d G "CP1_C2_A0" 1 354 "0x8002"
d G "CP1_C3_A0" 1 355 "0x8003"
d G "CP1_A1_DAC" 1 356 "0x8010"
d G "CP1_C1_DAC" 1 357 "0x8011"
d G "CP1_C2_DAC" 1 358 "0x8012"
d G "CP1_C3_DAC" 1 359 "0x8013"
d G "CP1_A1_FVR" 1 360 "0x8020"
d G "CP1_C1_FVR" 1 361 "0x8021"
d G "CP1_C2_FVR" 1 362 "0x8022"
d G "CP1_C3_FVR" 1 363 "0x8023"
d G "CP1_INT_L2H" 1 365 "0x0080"
d G "CP1_INT_H2L" 1 366 "0x0040"
d G "CP1_OUT_ON_A2" 1 367 "0x2000"
d G "CP1_INVERT" 1 368 "0x1000"
d G "CP1_FAST" 1 369 "0x0400"
d G "CP1_HYST" 1 370 "0x0200"
d G "CP1_SYNC" 1 371 "0x0100"
d G "CP2_A1_C0" 1 374 "0x80000000"
d G "CP2_C1_C0" 1 375 "0x80010000"
d G "CP2_C2_C0" 1 376 "0x80020000"
d G "CP2_C3_C0" 1 377 "0x80030000"
d G "CP2_A1_DAC" 1 378 "0x80100000"
d G "CP2_C1_DAC" 1 379 "0x80110000"
d G "CP2_C2_DAC" 1 380 "0x80120000"
d G "CP2_C3_DAC" 1 381 "0x80130000"
d G "CP2_A1_FVR" 1 382 "0x80200000"
d G "CP2_C1_FVR" 1 383 "0x80210000"
d G "CP2_C2_FVR" 1 384 "0x80220000"
d G "CP2_C3_FVR" 1 385 "0x80230000"
d G "CP2_INT_L2H" 1 387 "0x00800000"
d G "CP2_INT_H2L" 1 388 "0x00400000"
d G "CP2_OUT_ON_C4" 1 389 "0x20000000"
d G "CP2_INVERT" 1 390 "0x10000000"
d G "CP2_FAST" 1 391 "0x04000000"
d G "CP2_HYST" 1 392 "0x02000000"
d G "CP2_SYNC" 1 393 "0x01000000"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 400 "int8" `154 
f B "setup_vref" 1 400 "void(int8 mode)" `153  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 402 "0"
d G "VREF_ON" 1 403 "0x80"
d G "VREF_ADC_OFF" 1 405 "0"
d G "VREF_ADC_1v024" 1 406 "0x01"
d G "VREF_ADC_2v048" 1 407 "0x02"
d G "VREF_ADC_4v096" 1 408 "0x03"
d G "VREF_COMP_DAC_OFF" 1 410 "0"
d G "VREF_COMP_DAC_1v024" 1 411 "0x04"
d G "VREF_COMP_DAC_2v048" 1 412 "0x08"
d G "VREF_COMP_DAC_4v096" 1 413 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 415 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 416 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 417 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 418 "0x10"
c L "setup_vref" 1 3 3 "FUNCTION"
v L "mode" 1 423 "int8" `156 
f B "setup_dac" 1 423 "void(int8 mode)" `155 
v L "value" 1 424 "int8" `158 
f B "dac_write" 1 424 "void(int8 value)" `157  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 426 "0"
d G "DAC_VSS_VDD" 1 427 "0x80"
d G "DAC_VREF_VDD" 1 428 "0x81"
d G "DAC_VSS_VREF" 1 429 "0x84"
d G "DAC_VREF_VREF" 1 430 "0x85"
d G "DAC_VSS_FVR" 1 431 "0x88"
d G "DAC_FVR_VREF" 1 432 "0x89"
d G "DAC_OUTPUT" 1 434 "0x20"
d G "DAC_LVP_POS" 1 435 "0x40"
d G "DAC_LVP_NEG" 1 436 "0"
c L "dac_write" 1 3 2 "FUNCTION"
v L "mode" 1 441 "int8" `160 
f B "setup_oscillator" 1 441 "void(int8 mode)" `159  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 444 "0"
d G "OSC_31250" 1 445 " (2*8)"
d G "OSC_62KHZ" 1 446 " (4*8)"
d G "OSC_125KHZ" 1 447 " (5*8)"
d G "OSC_250KHZ" 1 448 " (6*8)"
d G "OSC_500KHZ" 1 449 " (7*8)"
d G "OSC_1MHZ" 1 450 " (11*8)"
d G "OSC_2MHZ" 1 451 " (12*8)"
d G "OSC_4MHZ" 1 452 " (13*8)"
d G "OSC_8MHZ" 1 453 " (14*8)"
d G "OSC_16MHZ" 1 454 " (15*8)"
d G "OSC_TIMER1" 1 456 "1"
d G "OSC_INTRC" 1 457 "2"
d G "OSC_NORMAL" 1 458 "0"
d G "OSC_PLL_ON" 1 460 "0x80"
d G "OSC_PLL_OFF" 1 461 "0"
c L "setup_oscillator" 1 3 4 "FUNCTION"
v L "mode" 1 468 "int16" `162 
f B "setup_adc" 1 468 "void(int16 mode)" `161 
f B "read_adc" 1 469 "int8()" `163 
v L "mode" 1 470 "int8" `165 
f G "read_adc" 1 470 "int8(int8 mode)" `164 
f G "read_adc" 1 471 "int16()" `166 
v L "mode" 1 472 "int8" `168 
f G "read_adc" 1 472 "int16(int8 mode)" `167 
f B "adc_done" 1 473 "int8()" `169  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 475 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 476 "0x100"
d G "ADC_CLOCK_DIV_4" 1 477 "0x40"
d G "ADC_CLOCK_DIV_8" 1 478 "0x10"
d G "ADC_CLOCK_DIV_32" 1 479 "0x20"
d G "ADC_CLOCK_DIV_16" 1 480 "0x50"
d G "ADC_CLOCK_DIV_64" 1 481 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 482 "0x30" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
v L "pins" 1 485 "int32" `171 
f B "setup_adc_ports" 1 485 "void(int32 pins)" `170 
v L "pins" 1 486 "int32" `173 
v L "reference" 1 486 "int32" `174 
f G "setup_adc_ports" 1 486 "void(int32 pins,int32 reference)" `172 
v L "channel" 1 487 "int8" `176 
f B "set_adc_channel" 1 487 "void(int8 channel)" `175  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 491 "0x000100" "| A0"
d G "sAN1" 1 492 "0x000200" "| A1"
d G "sAN2" 1 493 "0x000400" "| A2"
d G "sAN3" 1 494 "0x001000" "| A4"
d G "sAN4" 1 495 "0x000001" "| C0"
d G "sAN5" 1 496 "0x000002" "| C1"
d G "sAN6" 1 497 "0x000004" "| C2"
d G "sAN7" 1 498 "0x000008" "| C3"
d G "NO_ANALOGS" 1 499 "0" "None"
d G "ALL_ANALOG" 1 500 "0x00170F" "A0 A1 A2 A4 C0 C1 C2 C3"
d G "VSS_VDD" 1 503 "0x000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 504 "0x020000" "| Range 0-Vref"
d G "VSS_FVR" 1 505 "0x030000" "| Range 0-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 1 509 "0x1D"
d G "DAC_CHANNEL" 1 510 "0x1E"
d G "FVR_CHANNEL" 1 511 "0x1F"
d G "ADC_START_AND_READ" 1 514 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 515 "1"
d G "ADC_READ_ONLY" 1 516 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 522 "sint8" `178 
f B "abs" 1 522 "sint8(sint8 x)" `177 
v L "x" 1 523 "sint16" `180 
f G "abs" 1 523 "sint16(sint16 x)" `179 
v L "x" 1 524 "sint32" `182 
f G "abs" 1 524 "sint32(sint32 x)" `181 
v L "x" 1 525 "float" `184 
f G "abs" 1 525 "float(float x)" `183 
v L "??65535" 1 526 "int8" `186 
v L "??65535" 1 526 "int8" `187 
f B "_mul" 1 526 "int16(int8 ,int8 )" `185 
v L "??65535" 1 527 "sint8" `186 
v L "??65535" 1 527 "sint8" `190 
f G "_mul" 1 527 "sint16(sint8 ,sint8 )" `188 
v L "??65535" 1 528 "int16" `186 
v L "??65535" 1 528 "int16" `193 
f G "_mul" 1 528 "int32(int16 ,int16 )" `191 
v L "??65535" 1 529 "sint16" `186 
v L "??65535" 1 529 "sint16" `196 
f G "_mul" 1 529 "sint32(sint16 ,sint16 )" `194  "Memory Manipulation Prototypes:"
v L "bank" 1 532 "int8" `198 
v L "offset" 1 532 "int8" `199 
f B "read_bank" 1 532 "int8(int8 bank,int8 offset)" `197 
v L "bank" 1 533 "int8" `201 
v L "offset" 1 533 "int8" `202 
v L "value" 1 533 "int8" `203 
f B "write_bank" 1 533 "void(int8 bank,int8 offset,int8 value)" `200 
v L "dest" 1 534 "*int8" `205 
v L "src" 1 534 "*int8" `206 
f B "strcpy" 1 534 "void(*int8 dest,*int8 src)" `204 
v L "dest" 1 535 "*int8" `208 
v L "src" 1 535 "*int8" `209 
f B "strcopy" 1 535 "void(*int8 dest,*int8 src)" `207 
v L "destination" 1 536 "*int8" `211 
v L "value" 1 536 "int8" `212 
v L "num" 1 536 "int16" `213 
f B "memset" 1 536 "void(*int8 destination,int8 value,int16 num)" `210 
v L "destination" 1 537 "*int8" `215 
v L "source" 1 537 "*int8" `216 
v L "num" 1 537 "int16" `217 
f B "memcpy" 1 537 "void(*int8 destination,*int8 source,int16 num)" `214  "String Prototypes:"
v L "cvalue" 1 540 "int8" `219 
f B "toupper" 1 540 "int8(int8 cvalue)" `218 
v L "cvalue" 1 541 "int8" `221 
f B "tolower" 1 541 "int8(int8 cvalue)" `220 
v L "string" 1 542 "*int8" `223 
v L "cstring" 1 542 "*int8" `224 
f B "sprintf" 1 542 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `222  "Data Manipulators Prototypes:"
v L "address" 1 545 "*int8" `227 
v L "bytes" 1 545 "int8" `228 
v L "value" 1 545 "int8" `229 
f B "shift_left" 1 545 "int8(*int8 address,int8 bytes,int8 value)" `226 
v L "address" 1 546 "*int8" `231 
v L "bytes" 1 546 "int8" `232 
v L "value" 1 546 "int8" `233 
f B "shift_right" 1 546 "int8(*int8 address,int8 bytes,int8 value)" `230 
v L "address" 1 547 "*int8" `235 
v L "bytes" 1 547 "int8" `236 
f B "rotate_left" 1 547 "void(*int8 address,int8 bytes)" `234 
v L "address" 1 548 "*int8" `238 
v L "bytes" 1 548 "int8" `239 
f B "rotate_right" 1 548 "void(*int8 address,int8 bytes)" `237 
v L "value" 1 549 "int8" `241 
f B "swap" 1 549 "void(int8 value)" `240 
v L "var" 1 550 "int16" `243 
v L "offset" 1 550 "int8" `244 
f B "make8" 1 550 "int8(int16 var,int8 offset)" `242 
v L "var" 1 551 "int32" `243 
v L "offset" 1 551 "int8" `247 
f G "make8" 1 551 "int8(int32 var,int8 offset)" `245 
v L "varhigh" 1 552 "int8" `249 
v L "varlow" 1 552 "int8" `250 
f B "make16" 1 552 "int16(int8 varhigh,int8 varlow)" `248 
v L "var1" 1 553 "int16" `252 
f B "make32" 1 553 "int32(int16 var1)" `251 
v L "var1" 1 554 "int16" `254 
v L "var2" 1 554 "int16" `255 
f G "make32" 1 554 "int32(int16 var1,int16 var2)" `253 
v L "var1" 1 555 "int16" `254 
v L "var2" 1 555 "int8" `258 
f G "make32" 1 555 "int32(int16 var1,int8 var2)" `256 
v L "var1" 1 556 "int16" `260 
v L "var2" 1 556 "int8" `261 
v L "var3" 1 556 "int8" `262 
f G "make32" 1 556 "int32(int16 var1,int8 var2,int8 var3)" `259 
v L "var1" 1 557 "int8" `264 
f G "make32" 1 557 "int32(int8 var1)" `263 
v L "var1" 1 558 "int8" `254 
v L "var2" 1 558 "int8" `267 
f G "make32" 1 558 "int32(int8 var1,int8 var2)" `265 
v L "var1" 1 559 "int8" `260 
v L "var2" 1 559 "int8" `261 
v L "var3" 1 559 "int8" `271 
f G "make32" 1 559 "int32(int8 var1,int8 var2,int8 var3)" `268 
v L "var1" 1 560 "int8" `273 
v L "var2" 1 560 "int8" `274 
v L "var3" 1 560 "int8" `275 
v L "var4" 1 560 "int8" `276 
f G "make32" 1 560 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `272 
v L "var1" 1 561 "int8" `254 
v L "var2" 1 561 "int16" `279 
f G "make32" 1 561 "int32(int8 var1,int16 var2)" `277 
v L "var1" 1 562 "int8" `260 
v L "var2" 1 562 "int16" `261 
v L "var3" 1 562 "int8" `283 
f G "make32" 1 562 "int32(int8 var1,int16 var2,int8 var3)" `280 
v L "var1" 1 563 "int8" `260 
v L "var2" 1 563 "int8" `261 
v L "var3" 1 563 "int16" `287 
f G "make32" 1 563 "int32(int8 var1,int8 var2,int16 var3)" `284 
v L "var" 1 564 "int8" `289 
v L "bit" 1 564 "int8" `290 
f B "bit_set" 1 564 "void(int8 var,int8 bit)" `288 
v L "var" 1 565 "int16" `289 
v L "bit" 1 565 "int8" `293 
f G "bit_set" 1 565 "void(int16 var,int8 bit)" `291 
v L "var" 1 566 "int32" `289 
v L "bit" 1 566 "int8" `296 
f G "bit_set" 1 566 "void(int32 var,int8 bit)" `294 
v L "var" 1 567 "int8" `298 
v L "bit" 1 567 "int8" `299 
f B "bit_clear" 1 567 "void(int8 var,int8 bit)" `297 
v L "var" 1 568 "int16" `298 
v L "bit" 1 568 "int8" `302 
f G "bit_clear" 1 568 "void(int16 var,int8 bit)" `300 
v L "var" 1 569 "int32" `298 
v L "bit" 1 569 "int8" `305 
f G "bit_clear" 1 569 "void(int32 var,int8 bit)" `303 
v L "var" 1 570 "int8" `307 
v L "bit" 1 570 "int8" `308 
f B "bit_test" 1 570 "int8(int8 var,int8 bit)" `306 
v L "var" 1 571 "int16" `307 
v L "bit" 1 571 "int8" `311 
f G "bit_test" 1 571 "int8(int16 var,int8 bit)" `309 
v L "var" 1 572 "int32" `307 
v L "bit" 1 572 "int8" `314 
f G "bit_test" 1 572 "int8(int32 var,int8 bit)" `312  "#use delay() Prototypes:"
v L "count" 1 575 "int8" `316 
f B "delay_cycles" 1 575 "void(int8 count)" `315 
v L "time" 1 576 "int16" `318 
f B "delay_ms" 1 576 "void(int16 time)" `317 
v L "time" 1 577 "int16" `320 
f B "delay_us" 1 577 "void(int16 time)" `319  "#use rs232() Prototypes:"
v L "cdata" 1 580 "int8" `322 
f B "putchar" 1 580 "void(int8 cdata)" `321 
v L "cdata" 1 581 "int8" `324 
v L "stream" 1 581 "int8" `325 
f G "putchar" 1 581 "void(int8 cdata,int8 stream)" `323 
v L "string" 1 582 "*int8" `327 
f B "puts" 1 582 "void(*int8 string)" `326 
v L "string" 1 583 "*int8" `329 
v L "stream" 1 583 "int8" `330 
f G "puts" 1 583 "void(*int8 string,int8 stream)" `328 
f B "getch" 1 584 "int8()" `331 
v L "stream" 1 585 "int8" `333 
f G "getch" 1 585 "int8(int8 stream)" `332 
v L "string" 1 586 "*int8" `335 
f B "gets" 1 586 "void(*int8 string)" `334 
v L "string" 1 587 "*int8" `337 
v L "stream" 1 587 "int8" `338 
f G "gets" 1 587 "void(*int8 string,int8 stream)" `336 
f B "kbhit" 1 588 "int8()" `339 
v L "stream" 1 589 "int8" `341 
f G "kbhit" 1 589 "int8(int8 stream)" `340 
v L "string" 1 590 "*int8" `343 
f B "printf" 1 590 "void(*int8 string,*int8 _VA_LIST)" `342 
v L "stream" 1 591 "int8" `346 
v L "string" 1 591 "*int8" `347 
f B "fprintf" 1 591 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `345 
f B "putc_send" 1 592 "void()" `349 
v L "stream" 1 593 "int8" `351 
f B "fputc_send" 1 593 "void(int8 stream)" `350 
f B "rcv_buffer_full" 1 594 "int8()" `352 
v L "stream" 1 595 "int8" `354 
f G "rcv_buffer_full" 1 595 "int8(int8 stream)" `353 
f B "rcv_buffer_bytes" 1 596 "int16()" `355 
v L "stream" 1 597 "int8" `357 
f G "rcv_buffer_bytes" 1 597 "int16(int8 stream)" `356 
f B "tx_buffer_full" 1 598 "int8()" `358 
v L "stream" 1 599 "int8" `360 
f G "tx_buffer_full" 1 599 "int8(int8 stream)" `359 
f B "tx_buffer_bytes" 1 600 "int16()" `361 
v L "stream" 1 601 "int8" `363 
f G "tx_buffer_bytes" 1 601 "int16(int8 stream)" `362  "#use i2c() Prototypes:"
f B "i2c_read" 1 604 "int8()" `364 
v L "stream" 1 605 "int8" `366 
f G "i2c_read" 1 605 "int8(int8 stream)" `365 
v L "stream" 1 606 "int8" `368 
v L "ack" 1 606 "int8" `369 
f G "i2c_read" 1 606 "int8(int8 stream,int8 ack)" `367 
v L "data" 1 607 "int8" `371 
f B "i2c_write" 1 607 "int8(int8 data)" `370 
v L "stream" 1 608 "int8" `373 
v L "data" 1 608 "int8" `374 
f G "i2c_write" 1 608 "int8(int8 stream,int8 data)" `372 
f B "i2c_start" 1 609 "void()" `375 
v L "stream" 1 610 "int8" `377 
f G "i2c_start" 1 610 "void(int8 stream)" `376 
v L "stream" 1 611 "int8" `379 
v L "restart" 1 611 "int8" `380 
f G "i2c_start" 1 611 "void(int8 stream,int8 restart)" `378 
f B "i2c_stop" 1 612 "void()" `381 
v L "stream" 1 613 "int8" `383 
f G "i2c_stop" 1 613 "void(int8 stream)" `382 
f B "i2c_isr_state" 1 614 "int8()" `384 
v L "addr" 1 615 "int8" `386 
f B "i2c_slaveaddr" 1 615 "void(int8 addr)" `385 
v L "stream" 1 616 "int8" `388 
v L "addr" 1 616 "int8" `389 
f G "i2c_slaveaddr" 1 616 "void(int8 stream,int8 addr)" `387 
f B "i2c_poll" 1 617 "int8()" `390 
v L "stream" 1 618 "int8" `392 
f G "i2c_poll" 1 618 "int8(int8 stream)" `391 
v L "baud" 1 619 "int32" `394 
f B "i2c_init" 1 619 "void(int32 baud)" `393 
v L "stream" 1 620 "int8" `396 
v L "baud" 1 620 "int32" `397 
f G "i2c_init" 1 620 "void(int8 stream,int32 baud)" `395  "#use spi() Prototypes:"
f B "spi_xfer" 1 623 "int8()" `398 
f G "spi_xfer" 1 624 "int16()" `399 
f G "spi_xfer" 1 625 "int32()" `400 
v L "data" 1 626 "int8" `402 
f G "spi_xfer" 1 626 "int8(int8 data)" `401 
v L "data" 1 627 "int16" `404 
f G "spi_xfer" 1 627 "int16(int16 data)" `403 
v L "data" 1 628 "int32" `406 
f G "spi_xfer" 1 628 "int32(int32 data)" `405 
v L "stream" 1 629 "int8" `408 
v L "data" 1 629 "int8" `409 
f G "spi_xfer" 1 629 "int8(int8 stream,int8 data)" `407 
v L "stream" 1 630 "int8" `408 
v L "data" 1 630 "int16" `412 
f G "spi_xfer" 1 630 "int16(int8 stream,int16 data)" `410 
v L "stream" 1 631 "int8" `408 
v L "data" 1 631 "int32" `415 
f G "spi_xfer" 1 631 "int32(int8 stream,int32 data)" `413 
v L "stream" 1 632 "int8" `417 
v L "data" 1 632 "int8" `418 
v L "bits" 1 632 "int8" `419 
f G "spi_xfer" 1 632 "int8(int8 stream,int8 data,int8 bits)" `416 
v L "stream" 1 633 "int8" `417 
v L "data" 1 633 "int16" `418 
v L "bits" 1 633 "int8" `423 
f G "spi_xfer" 1 633 "int16(int8 stream,int16 data,int8 bits)" `420 
v L "stream" 1 634 "int8" `417 
v L "data" 1 634 "int32" `418 
v L "bits" 1 634 "int8" `427 
f G "spi_xfer" 1 634 "int32(int8 stream,int32 data,int8 bits)" `424 
v L "baud" 1 635 "int32" `429 
f B "spi_init" 1 635 "void(int32 baud)" `428 
v L "stream" 1 636 "int8" `431 
v L "baud" 1 636 "int32" `432 
f G "spi_init" 1 636 "void(int8 stream,int32 baud)" `430 
v L "baud" 1 637 "int32" `434 
f B "spi_speed" 1 637 "void(int32 baud)" `433 
v L "stream" 1 638 "int8" `436 
v L "baud" 1 638 "int32" `437 
f G "spi_speed" 1 638 "void(int8 stream,int32 baud)" `435 
v L "stream" 1 639 "int8" `439 
v L "baud" 1 639 "int32" `440 
v L "clock" 1 639 "int32" `441 
f G "spi_speed" 1 639 "void(int8 stream,int32 baud,int32 clock)" `438 
v L "data" 1 640 "int8" `443 
f B "spi_prewrite" 1 640 "void(int8 data)" `442 
v L "data" 1 641 "int16" `445 
f G "spi_prewrite" 1 641 "void(int16 data)" `444 
v L "data" 1 642 "int32" `447 
f G "spi_prewrite" 1 642 "void(int32 data)" `446 
v L "??65535" 1 643 "int8" `449 
v L "data" 1 643 "int8" `450 
f G "spi_prewrite" 1 643 "void(int8 ,int8 data)" `448 
v L "??65535" 1 644 "int8" `449 
v L "data" 1 644 "int16" `453 
f G "spi_prewrite" 1 644 "void(int8 ,int16 data)" `451 
v L "??65535" 1 645 "int8" `449 
v L "data" 1 645 "int32" `456 
f G "spi_prewrite" 1 645 "void(int8 ,int32 data)" `454 
f B "spi_xfer_in" 1 646 "int8()" `457 
f G "spi_xfer_in" 1 647 "int16()" `458 
f G "spi_xfer_in" 1 648 "int32()" `459 
v L "bits" 1 649 "int8" `461 
f G "spi_xfer_in" 1 649 "int8(int8 bits)" `460 
v L "bits" 1 650 "int8" `463 
f G "spi_xfer_in" 1 650 "int16(int8 bits)" `462 
v L "bits" 1 651 "int8" `465 
f G "spi_xfer_in" 1 651 "int32(int8 bits)" `464 
v L "stream" 1 652 "int8" `467 
v L "bits" 1 652 "int8" `468 
f G "spi_xfer_in" 1 652 "int8(int8 stream,int8 bits)" `466 
v L "stream" 1 653 "int8" `467 
v L "bits" 1 653 "int8" `471 
f G "spi_xfer_in" 1 653 "int16(int8 stream,int8 bits)" `469 
v L "stream" 1 654 "int8" `467 
v L "bits" 1 654 "int8" `474 
f G "spi_xfer_in" 1 654 "int32(int8 stream,int8 bits)" `472  "#use rtos() Prototypes:"
f B "rtos_run" 1 657 "void()" `475 
f B "rtos_yield" 1 658 "void()" `476 
v L "task" 1 659 "int8" `478 
f B "rtos_enable" 1 659 "void(int8 task)" `477 
v L "task" 1 660 "int8" `480 
f B "rtos_disable" 1 660 "void(int8 task)" `479 
f B "rtos_terminate" 1 661 "void()" `481 
v L "flag" 1 662 "int8" `483 
f B "rtos_await" 1 662 "void(int8 flag)" `482 
v L "sem" 1 663 "int8" `485 
f B "rtos_wait" 1 663 "void(int8 sem)" `484 
v L "sem" 1 664 "int8" `487 
f B "rtos_signal" 1 664 "void(int8 sem)" `486 
v L "task" 1 665 "int8" `489 
v L "msg" 1 665 "int8" `490 
f B "rtos_msg_send" 1 665 "void(int8 task,int8 msg)" `488 
f B "rtos_msg_read" 1 666 "int8()" `491 
f B "rtos_msg_poll" 1 667 "int8()" `492 
v L "task" 1 668 "int8" `494 
f B "rtos_overrun" 1 668 "int8(int8 task)" `493 
v L "task" 1 669 "int8" `496 
v L "stat" 1 669 "*int8" `497 
f B "rtos_stats" 1 669 "void(int8 task,*int8 stat)" `495  "#use timer() Prototypes:"
f B "get_ticks" 1 672 "int8()" `498 
f G "get_ticks" 1 673 "int16()" `499 
f G "get_ticks" 1 674 "int32()" `500 
v L "stream" 1 675 "int8" `502 
f G "get_ticks" 1 675 "int8(int8 stream)" `501 
v L "stream" 1 676 "int8" `504 
f G "get_ticks" 1 676 "int16(int8 stream)" `503 
v L "stream" 1 677 "int8" `506 
f G "get_ticks" 1 677 "int32(int8 stream)" `505 
v L "value" 1 678 "int8" `508 
f B "set_ticks" 1 678 "void(int8 value)" `507 
v L "value" 1 679 "int16" `510 
f G "set_ticks" 1 679 "void(int16 value)" `509 
v L "value" 1 680 "int32" `512 
f G "set_ticks" 1 680 "void(int32 value)" `511 
v L "stream" 1 681 "int8" `514 
v L "value" 1 681 "int8" `515 
f G "set_ticks" 1 681 "void(int8 stream,int8 value)" `513 
v L "stream" 1 682 "int8" `514 
v L "value" 1 682 "int16" `518 
f G "set_ticks" 1 682 "void(int8 stream,int16 value)" `516 
v L "stream" 1 683 "int8" `514 
v L "value" 1 683 "int32" `521 
f G "set_ticks" 1 683 "void(int8 stream,int32 value)" `519  "#use pwm() Prototypes:"
f B "pwm_on" 1 686 "void()" `522 
v L "stream" 1 687 "int8" `524 
f G "pwm_on" 1 687 "void(int8 stream)" `523 
f B "pwm_off" 1 688 "void()" `525 
v L "stream" 1 689 "int8" `527 
f G "pwm_off" 1 689 "void(int8 stream)" `526 
v L "duty" 1 690 "int16" `529 
f B "pwm_set_duty" 1 690 "void(int16 duty)" `528 
v L "stream" 1 691 "int8" `531 
v L "duty" 1 691 "int16" `532 
f G "pwm_set_duty" 1 691 "void(int8 stream,int16 duty)" `530 
v L "percent" 1 692 "int16" `534 
f B "pwm_set_duty_percent" 1 692 "void(int16 percent)" `533 
v L "stream" 1 693 "int8" `536 
v L "percent" 1 693 "int16" `537 
f G "pwm_set_duty_percent" 1 693 "void(int8 stream,int16 percent)" `535 
v L "frequency" 1 694 "int32" `539 
f B "pwm_set_frequency" 1 694 "void(int32 frequency)" `538 
v L "stream" 1 695 "int8" `541 
v L "frequency" 1 695 "int32" `542 
f G "pwm_set_frequency" 1 695 "void(int8 stream,int32 frequency)" `540  "#use capture() Prototypes:"
f B "get_capture_time" 1 698 "int16()" `543 
v L "stream" 1 699 "int8" `545 
f G "get_capture_time" 1 699 "int16(int8 stream)" `544 
f B "get_capture_event" 1 700 "int8()" `546 
v L "stream" 1 701 "int8" `548 
f G "get_capture_event" 1 701 "int8(int8 stream)" `547  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 714 "int16" `550 
f B "goto_address" 1 714 "void(int16 address)" `549 
v L "label" 1 715 "int16" `552 
f B "label_address" 1 715 "int16(int16 label)" `551  "Program Memory Prototypes:"
v L "address" 1 718 "int16" `554 
v L "dataptr" 1 718 "*int8" `555 
v L "count" 1 718 "int16" `556 
f B "read_program_memory" 1 718 "void(int16 address,*int8 dataptr,int16 count)" `553 
v L "address" 1 719 "int16" `558 
f B "read_program_eeprom" 1 719 "int16(int16 address)" `557 
v L "address" 1 720 "int16" `560 
f B "erase_program_eeprom" 1 720 "void(int16 address)" `559 
v L "address" 1 721 "int16" `562 
v L "dataptr" 1 721 "*int8" `563 
v L "count" 1 721 "int16" `564 
f B "write_program_memory" 1 721 "void(int16 address,*int8 dataptr,int16 count)" `561 
v L "address" 1 722 "int16" `566 
v L "data" 1 722 "int16" `567 
f B "write_program_eeprom" 1 722 "void(int16 address,int16 data)" `565  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 727 "int16" `568 
v L "address" 1 732 "__EEADDRESS__" `570 
f B "read_eeprom" 1 732 "int8(__EEADDRESS__ address)" `569 
v L "address" 1 733 "__EEADDRESS__" `572 
v L "value" 1 733 "int8" `573 
f B "write_eeprom" 1 733 "void(__EEADDRESS__ address,int8 value)" `571  "#use touchpad() Prototypes:"
v L "state" 1 736 "int8" `575 
f B "touchpad_state" 1 736 "void(int8 state)" `574 
f B "touchpad_getc" 1 737 "int8()" `576 
f B "touchpad_hit" 1 738 "int8()" `577  "INT"
c L "touchpad_hit" 1 3 4 "FUNCTION"
v L "interrupt" 1 744 "int32" `579 
f B "enable_interrupts" 1 744 "void(int32 interrupt)" `578 
v L "interrupt" 1 745 "int32" `581 
f B "disable_interrupts" 1 745 "void(int32 interrupt)" `580 
v L "interrupt" 1 746 "int32" `583 
f B "clear_interrupt" 1 746 "void(int32 interrupt)" `582 
v L "interrupt" 1 747 "int32" `585 
f B "interrupt_active" 1 747 "int8(int32 interrupt)" `584 
v L "interrupt" 1 748 "int32" `587 
f B "interrupt_enabled" 1 748 "int8(int32 interrupt)" `586 
v L "source" 1 749 "int8" `589 
v L "edge" 1 749 "int8" `590 
f B "ext_int_edge" 1 749 "void(int8 source,int8 edge)" `588 
v L "address" 1 750 "int16" `592 
f B "jump_to_irs" 1 750 "void(int16 address)" `591  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 752 "0x40"
d G "H_TO_L" 1 753 "0"
d G "GLOBAL" 1 755 "0x0BC0"
d G "PERIPH" 1 756 "0x0B40"
d G "INT_EXT_L2H" 1 757 "0x50000B10"
d G "INT_EXT_H2L" 1 758 "0x60000B10"
d G "INT_EXT" 1 759 "0x300B10"
d G "INT_TIMER0" 1 760 "0x300B20"
d G "INT_TIMER1" 1 761 "0x309101"
d G "INT_TIMER2" 1 762 "0x309102"
d G "INT_CCP1" 1 763 "0x309104"
d G "INT_SSP" 1 764 "0x309108"
d G "INT_TBE" 1 765 "0x309110"
d G "INT_RDA" 1 766 "0x309120"
d G "INT_AD" 1 767 "0x309140"
d G "INT_TIMER1_GATE" 1 768 "0x309180"
d G "INT_BUSCOL" 1 769 "0x309208"
d G "INT_EEPROM" 1 770 "0x309210"
d G "INT_COMP" 1 771 "0x309220"
d G "INT_OSC_FAIL" 1 772 "0x309280"
d G "INT_RA" 1 773 "0x30FF0B08"
d G "INT_RA0" 1 774 "0x30010B08"
d G "INT_RA0_L2H" 1 775 "0x10010B08"
d G "INT_RA0_H2L" 1 776 "0x20010B08"
d G "INT_RA1" 1 777 "0x30020B08"
d G "INT_RA1_L2H" 1 778 "0x10020B08"
d G "INT_RA1_H2L" 1 779 "0x20020B08"
d G "INT_RA2" 1 780 "0x30040B08"
d G "INT_RA2_L2H" 1 781 "0x10040B08"
d G "INT_RA2_H2L" 1 782 "0x20040B08"
d G "INT_RA3" 1 783 "0x30080B08"
d G "INT_RA3_L2H" 1 784 "0x10080B08"
d G "INT_RA3_H2L" 1 785 "0x20080B08"
d G "INT_RA4" 1 786 "0x30100B08"
d G "INT_RA4_L2H" 1 787 "0x10100B08"
d G "INT_RA4_H2L" 1 788 "0x20100B08"
d G "INT_RA5" 1 789 "0x30200B08"
d G "INT_RA5_L2H" 1 790 "0x10200B08"
d G "INT_RA5_H2L" 1 791 "0x20200B08"
D G "SH_CLK" 0 14 "PIN_A1"
D G "SH_LATCH" 0 15 "PIN_A0"
D G "SH_DATA" 0 16 "PIN_A2"
V L "addr" 0 20 "int8" `606 
V L "pos" 0 20 "int8" `607 
F G "readSlave" 0 20 "int8(int8 addr,int8 pos)" `605 
V L "result" 0 21 "int8" `608 
V L "addr" 0 36 "int8" `610 
V L "pos" 0 36 "int8" `611 
V L "dat" 0 36 "int8" `612 
F G "writeSlave" 0 37 "void(int8 addr,int8 pos,int8 dat)" `609 
V L "num" 0 45 "int8" `614 
F G "BCD" 0 45 "int8(int8 num)" `613 
V G "disp" 0 72 "int16" `615 
V L "num" 0 74 "int8" `617 
V L "point" 0 74 "int8" `618 
F G "shiftOut" 0 74 "void(int8 num,int8 point)" `616 
C L "shiftOut" 0 86 1 "FUNCTION"
V L "i" 0 87 "int8" `619 
C L "shiftOut" 0 86 1 "FUNCTION"
C L "shiftOut" 0 86 1 "FUNCTION"
C L "shiftOut" 0 86 1 "FUNCTION"
C L "shiftOut" 0 86 1 "FUNCTION"
V G "sec" 0 106 "int8" `620 
V G "min" 0 107 "int8" `621 
V G "hour" 0 108 "int8" `622  "day = 0,"
C L "task_1" 0 86 2 "FUNCTION"
F G "task_1" 0 115 "void()" `624 
C L "task_1" 0 86 3 "FUNCTION"
F G "task_2" 0 127 "void()" `626  "fprintf(uart1,"%02X : %02X : %02X\t\t" ,hour,min,sec);"
C L "task_2" 0 86 1 "FUNCTION"
F G "task_3" 0 134 "void()" `628 
C L "task_3" 0 86 1 "FUNCTION"
F G "MAIN" 0 149 "void()" `629 
C L "MAIN" 0 86 3 "FUNCTION"
C L "MAIN" 0 86 7 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
F B "i2c_init" 1 2
F B "rtos_run" 0 0
F B "rtos_yield" 0 0
F B "rtos_enable" 1 255
F B "rtos_disable" 1 255
F B "rtos_terminate" 0 0
F B "rtos_wait" 1 0
F B "rtos_signal" 1 0
F B "rtos_msg_send" 1 255
F B "rtos_msg_read" 0 0
F B "rtos_msg_poll" 0 0
F B "rtos_await" 1 0
F B "rtos_overrun" 0 255
